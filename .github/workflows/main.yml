name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Run npm audit
      run: npm audit --production

  build-and-test:
    needs: security-scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Build
      run: npm run build
      
    - name: Build Docker image
      run: docker build -t bein-states-proxy:${{ github.sha }} .
      
    - name: Scan Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'bein-states-proxy:${{ github.sha }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Push Docker image
      run: |
        docker tag bein-states-proxy:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/bein-states-proxy:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/bein-states-proxy:latest

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to production
      run: |
        echo "Déploiement sur l'environnement de production"
        # Ajoutez ici vos commandes de déploiement
        
    - name: Notify deployment status
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: good
        SLACK_TITLE: Déploiement réussi
        SLACK_MESSAGE: 'Application déployée avec succès sur production' 